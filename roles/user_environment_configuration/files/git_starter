#!/usr/bin/env sh
argc=$#

username=
email=
difftool=
mergetool=
gpgSigningKey=
verbose=
dry_run=
global_default_branch=
local_default_branch=
help=
force_init=
cmd=

log() {
    if [ ! -z $verbose ];then
        echo -e "$@"
    fi
}

debug() {
    echo "username=$username"
    echo "email=$email"
    echo "difftool=$difftool"
    echo "mergetool=$mergetool"
    echo "gpgSigningKey=$gpgSigningKey"
    echo "verbose=$verbose"
    echo "dry_run=$dry_run"
}

usage() {
    printf "Usage : `basename $0` [-u USERNAME] [-e EMAIL] [options]

    Options:

    -u, --username USERNAME
    \tName of the user who is creating the repository

    -e, --email EMAIL
    \tEmail id of the user

    -m, --merge-tool TOOL
    \tSpecify the merge tool to be used

    -d, --diff-tool TOOL
    \tSpecify the diff tool to be used

    -f, --force-initialize
    \tSpecify whether to reinitialize an existing repository.

    -g, --gpgkey KEY
    \tSpecify the GPG Key to be used to sign the commits

    -G, --global-default-branch BRANCH_NAME
    \tSpecify the default branch name to configure globally

    -L, --local-default-branch BRANCH_NAME
    \tSpecify the default branch name to configure locally

    -r, --dry-run
    \tRun the script with executing any commands.
    \tThis mode prints the commands that would be executed

    -D, --debug
    \tSpecify this in order to print the internal variables.
    \tUseful for debugging if something wrong with the script

    -v, --verbose
    \tEnable verbose output

    -h, --help
    \tPrint this help
    " | sed 's/^[ ]*//g'
}

parse_args() {
    while [ $# -gt 0 ]
    do
        case "$1" in
            -u | --username )
                shift
                username="'$1'"
                ;;

            -e | --email )
                shift
                email="'$1'"
                ;;
            -m | --merge-tool )
                shift
                mergetool="$1"
                ;;

            -d | --diff-tool )
                shift
                difftool="$1"
                ;;

            -f | --force-initialize )
                force_init=1
                ;;

            -g | --gpgkey )
                shift
                gpgSigningKey="$1"
                ;;

            -G | --global-default-branch )
                shift
                global_default_branch="$1"
                ;;

            -L | --local-default-branch )
                shift
                local_default_branch="$1"
                ;;

            -v | --verbose )
                verbose=1
                ;;

            -r | --dry-run )
                dry_run=1
                cmd="echo -e"
                ;;

            -D | --debug )
                debug=1
                ;;

            -h | --help )
                usage
                exit 0
                ;;
            * )
                echo "unknown option: $1"
                exit 1
                ;;
        esac
        shift
    done
}

setupenv_for_gpgauth() {
    echo 'export GPG_TTY=$(tty)' >> ~/.profile
}

configure_git_aliases() {
    log "\n-> Configuring git aliases"

    # Configure aliases
    if ! command -v gitk 2>&1 > /dev/null;then
        $cmd git config alias.visual '!gitk'
    else
        echo -e "\n===== Error: program gitk was not found. Failed to configure the alias ====="
        echo -e "Skipping alias configurations involving gitk\n"
    fi

    $cmd git config alias.show-commitgraph 'log --graph --oneline --decorate --all'
    $cmd git config alias.show-commitmsg 'show -s'
    $cmd git config alias.show-commitdiff 'show'
    $cmd git config alias.show-commitstat 'show --stat'
    $cmd git config alias.onelinelog 'log --oneline'
    $cmd git config alias.unstage-changes 'restore --staged'
    $cmd git config alias.unstage-all 'restore --staged .'
    $cmd git config alias.discard-changes 'restore'
    $cmd git config alias.discard-all 'restore .'
    $cmd git config alias.undo-last 'reset --mixed HEAD~1'
    $cmd git config alias.undo-till 'reset --mixed'
    $cmd git config alias.add-modified '!git add `git ls-files -m --exclude-standard --full-name`'
    $cmd git config alias.add-untracked '!git add `git ls-files -o --exclude-standard --full-name`'
    $cmd git config alias.restore-deleted '!git restore `git ls-files -d --exclude-standard --full-name`'
    $cmd git config alias.add-all '!git add `git ls-files -m -o --exclude-standard --full-name`'
    $cmd git config alias.list-untracked '!git ls-files -o --exclude-standard --full-name'
    $cmd git config alias.add-nw '!sh -c "git diff -U0 -w --no-color $@ | git apply --cached --ignore-whitespace --unidiff-zero -"'
    if [ ! -z "$gpgSigningKey" ];then
        $cmd git config alias.signed-commit '!git commit -S $@'
    fi
}

configure_difftool_params() {
    log "\n-> Configuring difftool"

    # Check if the tool exists
    if ! command -v "$difftool" 2>&1 > /dev/null;then
        echo -e "\n===== Error: program '$difftool' was not found ====="
        echo -e "Following paths were searched: $PATH\nPlease ensure its installed and present in PATH and then configure the repo again"
            exit 1
        fi
    # Configure difftool
    $cmd git config diff.tool "$difftool" &&

    # Configure difftool cmd
    log "\n-> Configuring difftool command" &&
    $cmd git config difftool.$difftool.cmd "$difftool \"\$LOCAL\" \"\$REMOTE\"" &&

    # Configure difftool prompt
    log "\n-> Configuring difftool prompt" &&
    $cmd git config difftool.prompt false
}

configure_mergetool_params() {
    log "\n-> Configuring mergetool"

    # Check if the tool exists
    if ! command -v "$mergetool" 2>&1 > /dev/null;then
        echo -e "\n===== Error: program '$mergetool' was not found ====="
        echo -e "Please ensure its installed and present in PATH and then configure the repo again"
        exit 1
    fi

    # Configure mergetool
    $cmd git config merge.tool "$mergetool" &&

    # Configure mergetoolcmd
    log "\n-> Configuring mergetool command" &&
    $cmd git config mergetool.$mergetool.cmd "$mergetool \"\$LOCAL\" \"\$MERGED\" \"\$REMOTE\" --output \"\$MERGED\""  &&

    # Configure mergetool prompt
    log "\n-> Configuring mergetool prompt" &&
    $cmd git config mergetool.prompt false
}

configure_user_name() {
    log "\n-> Configuring username"

    # Check if the repo has already configured username
    if git config --get user.name > /dev/null && [ -z $force_init ];then
        echo -e "\n===== Warning: Current repository has already configured username ====="
        echo -e "Skipping username configuration. Pass -f or --force-initialize to force reconfiguration"
    else
        if [ ! -z "$username" ];then
            # If cmdline args has username, configure directly
            $cmd git config user.name "$username"
        elif [ ! $(git config --global --get user.name) ];then
            # If username not supplied in cmdline, check global config. Fail if not present
            echo -e "\n===== Error: Username could not be found ====="
            echo -e "Please specify user name on command line or configure it globally"
            exit 1
        fi
    fi
}

configure_user_email() {
    log "\n-> Configuring email"

    # Check if the repo has already configured email
    if git config --get user.email 2>&1 > /dev/null && [ -z $force_init ];then
        echo -e "\n===== Warning: Current repository has already configured email ====="
        echo -e "Skipping email configuration. Pass -f or --force-initialize to force reconfiguration"
    else
        if [ ! -z "$email" ];then
            # If cmdline args has email, configure directly
            $cmd git config user.email "$email"
        elif [ ! $(git config --global --get user.email) ];then
            # If email not supplied in cmdline, check global config. Fail if not present
            echo -e "\n===== Error: Email could not be found ====="
            echo -e "Please specify email on command line or configure it globally"
            exit 1
        fi
    fi
}

main() {
    if [ $# -lt 2 ];then
        usage
        exit 1
    fi
    parse_args "$@"

    if [ ! -z $dry_run ];then
        echo -e "Running script in dry-run mode. Below are the commands that will be executed"
        verbose=1
        cmd="echo -e "
    fi

    if [ ! -z $debug ];then
        debug
    fi

    if [ ! -d .git ] || [ ! -z $force_init ];then
        # Initialize git repository
        log "\n-> Initializing git repository in `pwd`"
        $cmd git init
    else
        log "\n-> Skipping repository initialization because it already exists. Pass -f or --force-initialize to force reinitialization"
    fi

    # Configure username if specified
    if [ ! -z "$username" ];then
        configure_user_name
    fi

    # Configure email if specified
    if [ ! -z "$email" ];then
        configure_user_email
    fi

    # Configure global default branch name
    if [ ! -z $global_default_branch ];then
        log "\n-> Configuring default branch name as $global_default_branch"
        $cmd git config --global init.defaultBranch "$global_default_branch"
    fi

    # Configure local default branch name
    if [ ! -z $local_default_branch ];then
        log "\n-> Configuring local default branch name as $local_default_branch"
        $cmd git config init.defaultBranch "$local_default_branch"
    fi

    # Configure GPG Signing Key, if present
    if [ ! -z "$gpgSigningKey" ];then
        log "\n-> Configuring GPG Signing Key"
        $cmd git config user.signingkey "$gpgSigningKey"
        $cmd git config commit.gpgSign true
    fi

    # Configure git aliases
    configure_git_aliases

    # Configure difftool
    if [ ! -z "$difftool" ];then
        configure_difftool_params
    fi

    # Configure mergetool
    if [ ! -z "$mergetool" ];then
        configure_mergetool_params
    fi
}

main "$@"
